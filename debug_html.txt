<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ESP32 Dual Fan Controller - Board #1</title>
    <style>
        body { font-family: Arial, sans-serif; background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%); margin: 0; padding: 20px; color: white; }
        .container { max-width: 800px; margin: 0 auto; background: rgba(255,255,255,0.1); border-radius: 15px; padding: 30px; }
        h1 { text-align: center; margin-bottom: 20px; font-size: 2.2em; }
        .wifi-status { text-align: center; margin-bottom: 20px; padding: 10px; border-radius: 8px; font-weight: bold; }
        .wifi-station { background: rgba(0,255,0,0.3); }
        .wifi-ap { background: rgba(255,165,0,0.3); }
        .fans-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 30px; }
        .fan-section { background: rgba(255,255,255,0.15); border-radius: 10px; padding: 20px; }
        .fan-title { text-align: center; font-size: 1.4em; margin-bottom: 15px; padding-bottom: 10px; border-bottom: 2px solid rgba(255,255,255,0.3); }
        .fan1-title { border-bottom-color: #2ecc71; }
        .fan2-title { border-bottom-color: #e74c3c; }
        .status-card { background: rgba(255,255,255,0.15); border-radius: 8px; padding: 15px; text-align: center; margin-bottom: 15px; }
        .status-value { font-size: 2em; font-weight: bold; margin: 5px 0; }
        .status-label { font-size: 0.9em; opacity: 0.8; }
        .speed-buttons { display: grid; grid-template-columns: repeat(3,1fr); gap: 8px; }
        .speed-btn { background: rgba(255,255,255,0.2); border: 2px solid rgba(255,255,255,0.3); color: white; padding: 10px; border-radius: 6px; cursor: pointer; font-size: 0.9em; font-weight: bold; }
        .speed-btn:hover { background: rgba(255,255,255,0.3); }
        .speed-btn.active.fan1 { background: rgba(46,204,113,0.8); border-color: #2ecc71; }
        .speed-btn.active.fan2 { background: rgba(231,76,60,0.8); border-color: #e74c3c; }
        .info-section { margin-top: 20px; padding: 20px; background: rgba(0,0,0,0.2); border-radius: 10px; font-size: 0.9em; }
        .info-row { display: flex; justify-content: space-between; margin: 5px 0; }
        .debug { background: rgba(255,0,0,0.2); padding: 10px; border-radius: 5px; margin: 10px 0; font-size: 0.8em; }
        @media (max-width: 768px) { .fans-grid { grid-template-columns: 1fr; } .speed-buttons { grid-template-columns: repeat(2,1fr); } }
    </style>
</head>
<body>
    <div class="container">
        <h1>ESP32 Dual Fan Controller</h1>
        <div id="debug" class="debug">Debug: Loading...</div>
        <div id="wifi-status" class="wifi-status">Loading WiFi Status...</div>
        
        <div class="fans-grid">
            <div class="fan-section">
                <div class="fan-title fan1-title">[IN] Fan 1 (Intake)</div>
                <div class="status-card">
                    <div class="status-value" id="fan1-rpm">0</div>
                    <div class="status-label">RPM</div>
                </div>
                <div class="status-card">
                    <div class="status-value" id="fan1-speed">0%</div>
                    <div class="status-label">Speed</div>
                </div>
                <div class="speed-buttons">
                    <button class="speed-btn fan1" onclick="setFan1Speed(0)">0%</button>
                    <button class="speed-btn fan1" onclick="setFan1Speed(20)">20%</button>
                    <button class="speed-btn fan1" onclick="setFan1Speed(40)">40%</button>
                    <button class="speed-btn fan1" onclick="setFan1Speed(60)">60%</button>
                    <button class="speed-btn fan1" onclick="setFan1Speed(80)">80%</button>
                    <button class="speed-btn fan1" onclick="setFan1Speed(100)">100%</button>
                </div>
            </div>
            
            <div class="fan-section">
                <div class="fan-title fan2-title">[OUT] Fan 2 (Exhaust)</div>
                <div class="status-card">
                    <div class="status-value" id="fan2-rpm">0</div>
                    <div class="status-label">RPM</div>
                </div>
                <div class="status-card">
                    <div class="status-value" id="fan2-speed">0%</div>
                    <div class="status-label">Speed</div>
                </div>
                <div class="speed-buttons">
                    <button class="speed-btn fan2" onclick="setFan2Speed(0)">0%</button>
                    <button class="speed-btn fan2" onclick="setFan2Speed(20)">20%</button>
                    <button class="speed-btn fan2" onclick="setFan2Speed(40)">40%</button>
                    <button class="speed-btn fan2" onclick="setFan2Speed(60)">60%</button>
                    <button class="speed-btn fan2" onclick="setFan2Speed(80)">80%</button>
                    <button class="speed-btn fan2" onclick="setFan2Speed(100)">100%</button>
                </div>
            </div>
        </div>
        
        <div class="info-section">
            <div class="info-row"><span>Board MAC:</span><span id="board-mac">Loading...</span></div>
            <div class="info-row"><span>WiFi Mode:</span><span id="wifi-mode">Loading...</span></div>
            <div class="info-row"><span>Network:</span><span id="wifi-network">Loading...</span></div>
            <div class="info-row"><span>IP Address:</span><span id="ip-address">Loading...</span></div>
            <div class="info-row"><span>Signal/Clients:</span><span id="wifi-signal">Loading...</span></div>
            <div class="info-row"><span>Uptime:</span><span id="uptime">Loading...</span></div>
        </div>
    </div>

    <script>
        function debugLog(msg) {
            const debug = document.getElementById('debug');
            if (debug) debug.textContent = new Date().toLocaleTimeString() + ': ' + msg;
            console.log('ESP32 Debug:', msg);
        }

        function setFan1Speed(speed) {
            debugLog('Setting Fan 1 to ' + speed + '%');
            fetch('/set_fan1', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ speed: speed })
            })
            .then(response => {
                debugLog('Fan 1 response: ' + response.status);
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    updateFan1Buttons(speed);
                    updateStatus();
                }
            })
            .catch(error => {
                debugLog('Fan 1 Error: ' + error.message);
                console.error('Fan 1 Error:', error);
            });
        }

        function setFan2Speed(speed) {
            debugLog('Setting Fan 2 to ' + speed + '%');
            fetch('/set_fan2', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ speed: speed })
            })
            .then(response => {
                debugLog('Fan 2 response: ' + response.status);
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    updateFan2Buttons(speed);
                    updateStatus();
                }
            })
            .catch(error => {
                debugLog('Fan 2 Error: ' + error.message);
                console.error('Fan 2 Error:', error);
            });
        }

        function updateFan1Buttons(activeSpeed) {
            document.querySelectorAll('.speed-btn.fan1').forEach(btn => {
                btn.classList.remove('active');
                if (parseInt(btn.textContent) === activeSpeed) {
                    btn.classList.add('active');
                }
            });
        }

        function updateFan2Buttons(activeSpeed) {
            document.querySelectorAll('.speed-btn.fan2').forEach(btn => {
                btn.classList.remove('active');
                if (parseInt(btn.textContent) === activeSpeed) {
                    btn.classList.add('active');
                }
            });
        }

        function updateStatus() {
            debugLog('Fetching status...');
            fetch('/status')
            .then(response => {
                debugLog('Status response: ' + response.status);
                if (!response.ok) {
                    throw new Error('Status response not OK: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                debugLog('Status data received - WiFi: ' + data.wifi_mode);
                
                // Update fan displays
                document.getElementById('fan1-rpm').textContent = data.fan1_rpm || 0;
                document.getElementById('fan1-speed').textContent = (data.fan1_speed || 0) + '%';
                document.getElementById('fan2-rpm').textContent = data.fan2_rpm || 0;
                document.getElementById('fan2-speed').textContent = (data.fan2_speed || 0) + '%';
                
                // Update system info
                document.getElementById('board-mac').textContent = data.board_mac || 'Unknown';
                document.getElementById('wifi-mode').textContent = data.wifi_mode || 'Unknown';
                document.getElementById('wifi-network').textContent = data.wifi_network || 'Unknown';
                document.getElementById('ip-address').textContent = data.ip_address || 'Unknown';
                document.getElementById('uptime').textContent = formatUptime(data.uptime || 0);
                
                // Update button states
                updateFan1Buttons(data.fan1_speed || 0);
                updateFan2Buttons(data.fan2_speed || 0);
                
                // Update WiFi status
                const wifiStatus = document.getElementById('wifi-status');
                if (data.wifi_mode === 'Access Point') {
                    wifiStatus.textContent = 'AP Mode: Connect to "' + data.wifi_network + '"';
                    wifiStatus.className = 'wifi-status wifi-ap';
                    document.getElementById('wifi-signal').textContent = (data.connected_clients || 0) + ' clients';
                } else {
                    wifiStatus.textContent = 'Connected to: ' + data.wifi_network;
                    wifiStatus.className = 'wifi-status wifi-station';
                    document.getElementById('wifi-signal').textContent = (data.wifi_signal || 0) + ' dBm';
                }
            })
            .catch(error => {
                debugLog('Status Error: ' + error.message);
                console.error('Status Error:', error);
                document.getElementById('wifi-status').textContent = 'Error loading status: ' + error.message;
            });
        }

        function formatUptime(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            return hours + 'h ' + minutes + 'm ' + secs + 's';
        }

        // Initialize
        debugLog('JavaScript loaded, starting...');
        updateStatus();
        setInterval(updateStatus, 3000);
    </script>
</body>
</html>
