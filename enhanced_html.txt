<!DOCTYPE html>
<html>
<head>
    <title>ESP32 Fan Controller with RGB</title>
    <style>
        body { font-family: Arial, sans-serif; background: #1e3c72; color: white; padding: 20px; }
        .container { max-width: 900px; margin: 0 auto; background: rgba(255,255,255,0.1); border-radius: 10px; padding: 20px; }
        h1 { text-align: center; }
        #debug { background: rgba(255,0,0,0.3); padding: 10px; margin: 10px 0; border-radius: 5px; font-size: 12px; }
        #status { background: rgba(0,0,0,0.3); padding: 15px; margin: 10px 0; border-radius: 5px; }
        .fan { background: rgba(255,255,255,0.1); margin: 10px 0; padding: 15px; border-radius: 8px; }
        .fan h3 { margin: 0 0 10px 0; }
        .info { display: flex; justify-content: space-between; margin: 5px 0; }
        .buttons { display: grid; grid-template-columns: repeat(6, 1fr); gap: 8px; margin-top: 10px; }
        .btn { background: rgba(255,255,255,0.2); border: none; color: white; padding: 8px 4px; border-radius: 5px; cursor: pointer; font-weight: bold; font-size: 11px; }
        .btn:hover { background: rgba(255,255,255,0.3); }
        .btn.active { background: rgba(0,255,0,0.6); border: 1px solid #00ff00; }
        
        /* ARGB Controls */
        .rgb-controls { background: rgba(255,255,255,0.05); padding: 10px; margin-top: 10px; border-radius: 5px; }
        .rgb-controls h4 { margin: 0 0 10px 0; color: #FFD700; }
        .color-row { display: flex; align-items: center; gap: 10px; margin: 8px 0; }
        .color-input { width: 60px; height: 30px; border: none; border-radius: 3px; cursor: pointer; }
        .slider { width: 150px; height: 20px; }
        .effect-select { padding: 5px; border-radius: 3px; background: rgba(255,255,255,0.2); color: white; border: none; }
        .rgb-preview { width: 40px; height: 20px; border-radius: 3px; display: inline-block; margin-left: 10px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üå™Ô∏è ESP32 Fan Controller with RGB üåà</h1>
        
        <div id="debug">Debug: Starting...</div>
        
        <div id="status">
            <div class="info"><span>WiFi:</span><span id="wifi">Loading...</span></div>
            <div class="info"><span>IP:</span><span id="ip">Loading...</span></div>
            <div class="info"><span>Uptime:</span><span id="uptime">Loading...</span></div>
        </div>

        <!-- Global ARGB Effects -->
        <div class="fan">
            <h3>üé® RGB Effects</h3>
            <div class="color-row">
                <label>Effect:</label>
                <select id="effect-select" class="effect-select" onchange="setArgbEffect(this.value)">
                    <option value="0">Solid Color</option>
                    <option value="1">Breathing</option>
                    <option value="2">Rainbow</option>
                </select>
            </div>
        </div>

        <!-- Fan 1 Controls -->
        <div class="fan" id="fan1-section">
            <h3>Fan 1 (GPIO 5) üåÄ</h3>
            <div class="info"><span>Speed:</span><span id="fan1-speed">0%</span></div>
            <div class="info"><span>RPM:</span><span id="fan1-rpm">0</span></div>
            <div class="buttons">
                <button class="btn fan1-btn" onclick="setFan1(0)">0%</button>
                <button class="btn fan1-btn" onclick="setFan1(10)">10%</button>
                <button class="btn fan1-btn" onclick="setFan1(20)">20%</button>
                <button class="btn fan1-btn" onclick="setFan1(30)">30%</button>
                <button class="btn fan1-btn" onclick="setFan1(40)">40%</button>
                <button class="btn fan1-btn" onclick="setFan1(50)">50%</button>
                <button class="btn fan1-btn" onclick="setFan1(60)">60%</button>
                <button class="btn fan1-btn" onclick="setFan1(70)">70%</button>
                <button class="btn fan1-btn" onclick="setFan1(80)">80%</button>
                <button class="btn fan1-btn" onclick="setFan1(90)">90%</button>
                <button class="btn fan1-btn" onclick="setFan1(100)">100%</button>
            </div>
            
            <!-- Fan 1 RGB Controls -->
            <div class="rgb-controls">
                <h4>üí° RGB Controls</h4>
                <div class="color-row">
                    <label>Color:</label>
                    <input type="color" id="fan1-color" class="color-input" onchange="setFan1Color(this.value)" value="#0064ff">
                    <span class="rgb-preview" id="fan1-preview"></span>
                </div>
                <div class="color-row">
                    <label>Brightness:</label>
                    <input type="range" id="fan1-brightness" class="slider" min="0" max="100" value="50" onchange="setFan1Brightness(this.value)">
                    <span id="fan1-brightness-val">50%</span>
                </div>
            </div>
        </div>

        <!-- Fan 2 Controls -->
        <div class="fan" id="fan2-section">
            <h3>Fan 2 (GPIO 21) üåÄ</h3>
            <div class="info"><span>Speed:</span><span id="fan2-speed">0%</span></div>
            <div class="info"><span>RPM:</span><span id="fan2-rpm">0</span></div>
            <div class="buttons">
                <button class="btn fan2-btn" onclick="setFan2(0)">0%</button>
                <button class="btn fan2-btn" onclick="setFan2(10)">10%</button>
                <button class="btn fan2-btn" onclick="setFan2(20)">20%</button>
                <button class="btn fan2-btn" onclick="setFan2(30)">30%</button>
                <button class="btn fan2-btn" onclick="setFan2(40)">40%</button>
                <button class="btn fan2-btn" onclick="setFan2(50)">50%</button>
                <button class="btn fan2-btn" onclick="setFan2(60)">60%</button>
                <button class="btn fan2-btn" onclick="setFan2(70)">70%</button>
                <button class="btn fan2-btn" onclick="setFan2(80)">80%</button>
                <button class="btn fan2-btn" onclick="setFan2(90)">90%</button>
                <button class="btn fan2-btn" onclick="setFan2(100)">100%</button>
            </div>
            
            <!-- Fan 2 RGB Controls -->
            <div class="rgb-controls">
                <h4>üí° RGB Controls</h4>
                <div class="color-row">
                    <label>Color:</label>
                    <input type="color" id="fan2-color" class="color-input" onchange="setFan2Color(this.value)" value="#ff6400">
                    <span class="rgb-preview" id="fan2-preview"></span>
                </div>
                <div class="color-row">
                    <label>Brightness:</label>
                    <input type="range" id="fan2-brightness" class="slider" min="0" max="100" value="50" onchange="setFan2Brightness(this.value)">
                    <span id="fan2-brightness-val">50%</span>
                </div>
            </div>
        </div>
    </div>

    <script>
        function log(msg) {
            document.getElementById('debug').textContent = new Date().toLocaleTimeString() + ': ' + msg;
            console.log(msg);
        }

        // Fan Speed Controls
        function setFan1(speed) {
            log('Setting Fan 1 to ' + speed + '%');
            fetch('/set_fan1', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({speed: speed})
            }).then(r => r.json()).then(d => {
                if (d.success) {
                    log('Fan 1 set to ' + speed + '%');
                    updateFan1Buttons(speed);
                    updateStatus();
                }
            }).catch(e => log('Fan 1 Error: ' + e));
        }

        function setFan2(speed) {
            log('Setting Fan 2 to ' + speed + '%');
            fetch('/set_fan2', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({speed: speed})
            }).then(r => r.json()).then(d => {
                if (d.success) {
                    log('Fan 2 set to ' + speed + '%');
                    updateFan2Buttons(speed);
                    updateStatus();
                }
            }).catch(e => log('Fan 2 Error: ' + e));
        }

        // ARGB Color Controls
        function setFan1Color(hexColor) {
            const rgb = hexToRgb(hexColor);
            log('Setting Fan 1 RGB: ' + rgb.r + ',' + rgb.g + ',' + rgb.b);
            
            fetch('/set_fan1_color', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({red: rgb.r, green: rgb.g, blue: rgb.b})
            }).then(r => r.json()).then(d => {
                if (d.success) {
                    log('Fan 1 color updated');
                    document.getElementById('fan1-preview').style.backgroundColor = hexColor;
                }
            }).catch(e => log('Fan 1 Color Error: ' + e));
        }

        function setFan2Color(hexColor) {
            const rgb = hexToRgb(hexColor);
            log('Setting Fan 2 RGB: ' + rgb.r + ',' + rgb.g + ',' + rgb.b);
            
            fetch('/set_fan2_color', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({red: rgb.r, green: rgb.g, blue: rgb.b})
            }).then(r => r.json()).then(d => {
                if (d.success) {
                    log('Fan 2 color updated');
                    document.getElementById('fan2-preview').style.backgroundColor = hexColor;
                }
            }).catch(e => log('Fan 2 Color Error: ' + e));
        }

        function setFan1Brightness(brightness) {
            log('Setting Fan 1 brightness to ' + brightness + '%');
            document.getElementById('fan1-brightness-val').textContent = brightness + '%';
            
            fetch('/set_fan1_brightness', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({brightness: parseInt(brightness)})
            }).then(r => r.json()).then(d => {
                if (d.success) {
                    log('Fan 1 brightness updated');
                }
            }).catch(e => log('Fan 1 Brightness Error: ' + e));
        }

        function setFan2Brightness(brightness) {
            log('Setting Fan 2 brightness to ' + brightness + '%');
            document.getElementById('fan2-brightness-val').textContent = brightness + '%';
            
            fetch('/set_fan2_brightness', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({brightness: parseInt(brightness)})
            }).then(r => r.json()).then(d => {
                if (d.success) {
                    log('Fan 2 brightness updated');
                }
            }).catch(e => log('Fan 2 Brightness Error: ' + e));
        }

        function setArgbEffect(effect) {
            log('Setting ARGB effect to: ' + effect);
            
            fetch('/set_argb_effect', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({effect: parseInt(effect)})
            }).then(r => r.json()).then(d => {
                if (d.success) {
                    log('ARGB effect updated');
                }
            }).catch(e => log('ARGB Effect Error: ' + e));
        }

        // Helper functions
        function hexToRgb(hex) {
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }

        function rgbToHex(r, g, b) {
            return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
        }

        function updateFan1Buttons(activeSpeed) {
            document.querySelectorAll('.fan1-btn').forEach(btn => {
                btn.classList.remove('active');
                if (parseInt(btn.textContent) === activeSpeed) {
                    btn.classList.add('active');
                }
            });
        }

        function updateFan2Buttons(activeSpeed) {
            document.querySelectorAll('.fan2-btn').forEach(btn => {
                btn.classList.remove('active');
                if (parseInt(btn.textContent) === activeSpeed) {
                    btn.classList.add('active');
                }
            });
        }

        function updateStatus() {
            fetch('/status').then(r => r.json()).then(d => {
                // Update fan status
                document.getElementById('fan1-speed').textContent = d.fan1_speed + '%';
                document.getElementById('fan1-rpm').textContent = d.fan1_rpm;
                document.getElementById('fan2-speed').textContent = d.fan2_speed + '%';
                document.getElementById('fan2-rpm').textContent = d.fan2_rpm;
                
                // Update system info
                document.getElementById('wifi').textContent = d.wifi_network;
                document.getElementById('ip').textContent = d.ip_address;
                document.getElementById('uptime').textContent = Math.floor(d.uptime/60) + 'm';
                
                // Update ARGB controls from server state
                if (d.fan1_red !== undefined) {
                    const fan1Hex = rgbToHex(d.fan1_red, d.fan1_green, d.fan1_blue);
                    document.getElementById('fan1-color').value = fan1Hex;
                    document.getElementById('fan1-preview').style.backgroundColor = fan1Hex;
                    document.getElementById('fan1-brightness').value = d.fan1_brightness;
                    document.getElementById('fan1-brightness-val').textContent = d.fan1_brightness + '%';
                }
                
                if (d.fan2_red !== undefined) {
                    const fan2Hex = rgbToHex(d.fan2_red, d.fan2_green, d.fan2_blue);
                    document.getElementById('fan2-color').value = fan2Hex;
                    document.getElementById('fan2-preview').style.backgroundColor = fan2Hex;
                    document.getElementById('fan2-brightness').value = d.fan2_brightness;
                    document.getElementById('fan2-brightness-val').textContent = d.fan2_brightness + '%';
                }
                
                if (d.argb_effect !== undefined) {
                    document.getElementById('effect-select').value = d.argb_effect;
                }
                
                // Update button states
                updateFan1Buttons(d.fan1_speed || 0);
                updateFan2Buttons(d.fan2_speed || 0);
                
                log('Status updated');
            }).catch(e => log('Status Error: ' + e));
        }

        // Initialize
        log('RGB Fan Controller loaded');
        updateStatus();
        setInterval(updateStatus, 2000);
    </script>
</body>
</html>
